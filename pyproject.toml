[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[project]
name = "qadst"
description = "QA Dataset Toolkit for clustering and benchmarking"
license = "MIT"
readme = "README.md"
repository = "https://github.com/sergeyklay/qadst"
homepage = "https://github.com/sergeyklay/qadst"
documentation = "https://github.com/sergeyklay/qadst"
requires-python = ">=3.10, <4"
authors = [{ name = "Serghei Iakovlev", email = "oss@serghei.pl" }]
dynamic = ["dependencies", "version"]
include = [
    { path = "tests", format = "sdist" },
    "LICENSE",
    "INSTALL.md",
    "README.md",
    "USAGE.md",
]

[tool.poetry]
requires-poetry = ">=2.0"
packages = [{ include = "qadst" }]
version = "0.0.0"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/sergeyklay/qadst/issues"

[tool.poetry.scripts]
qadst = "qadst.cli:main"

[tool.poetry.dependencies]
click = "^8.1.8"
hdbscan = "^0.8.4"
langchain = "^0.3.19"
langchain-openai = "^0.3.6"
numpy = "^2.2.3"
pandas = "^2.2.3"
python-dotenv = "^1.0.1"
scikit-learn = "^1.6.1"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
debugpy = "^1.8.13"
flake8 = "^7.1.2"
isort = { version = "^6.0.1", extras = ["colors"] }
pre-commit = "^4.1.0"

[tool.poetry.group.testing.dependencies]
coverage = { version = "^7.6.12", extras = ["toml"] }
pytest = "^8.3.5"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
metadata = true

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.isort]
profile = "black"
py_version = 312

[tool.coverage.report]
# Set the number of decimal places in coverage percentage
precision = 2

# Show lines that were not executed
show_missing = true

# Skip empty files
skip_empty = true

[tool.coverage.html]
# Directory for the HTML format report
directory = "coverage/html"

[tool.coverage.lcov]
# Filename for the LCOV format report
output = "coverage/lcov/coverage.lcov"

[tool.coverage.xml]
# Filename for the XML format report
output = "coverage/xml/coverage.xml"

[tool.coverage.run]
# Enable branch coverage (default: False)
branch = true

# Run tests in parallel (useful when using CI/CD)
parallel = true

# Filename for storing coverage data
data_file = "coverage/.coverage"

# Omit specified files or directories from the report
omit = [
    "*/__pycache__/*",
    "*/.poetry/*",
    "*/.pytest_cache/*",
    "*/.venv/*",
    "*/coverage/*",
    "*/dist/*",
    "*/tests/*",
]
