[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[project]
name = "clusx"
description = "Tool for clustering, analyzing, and benchmarking text data with advanced embeddings and statistical validation."
license = "MIT"
readme = "README.md"
requires-python = ">=3.11,<4"
authors = [{ name = "Serghei Iakovlev", email = "oss@serghei.pl" }]
dynamic = ["classifiers", "dependencies", "version"]
keywords = [
    "clustering",
    "text-analysis",
    "nlp",
    "natural-language-processing",
    "machine-learning",
    "dirichlet-process",
    "pitman-yor-process",
    "embeddings",
    "sentence-transformers",
    "power-law",
    "data-science"
]

[project.urls]
homepage = "https://clusterium.readthedocs.io"
repository = "https://github.com/sergeyklay/clusterium"
documentation = "https://clusterium.readthedocs.io"
"Bug Tracker" = "https://github.com/sergeyklay/clusterium/issues"

[project.scripts]
clusx = "clusx.cli:main"

[tool.poetry]
requires-poetry = ">=2.0"
packages = [{ include = "clusx" }]
include = [
    { path = "tests", format = "sdist" },
    "LICENSE",
    "README.md",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Text Processing",
    "Topic :: Text Processing :: Linguistic",
    "Typing :: Typed"
]
version = "0.0.0"

[tool.poetry.dependencies]
click = "^8.1.8"
matplotlib = "^3.10.1"
numpy = "^2.2.3"
pandas = "^2.2.3"
powerlaw = "^1.5"
scikit-learn = "^1.6.1"
scipy = "^1.15.2"
sentence-transformers = "^3.4.1"
torch = "^2.3.0"
tqdm = "^4.67.1"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
debugpy = "^1.8.13"
flake8 = "^7.1.2"
isort = { version = "^6.0.1", extras = ["colors"] }
pre-commit = "^4.1.0"

[tool.poetry.group.testing.dependencies]
coverage = { version = "^7.6.12", extras = ["toml"] }
pytest = "^8.3.5"

[tool.poetry.group.docs.dependencies]
sphinx = "^8.2.3"
sphinx-rtd-theme = "^3.0.2"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
# Disable the local version part (the part after +) for PyPI compatibility
pattern = "^(?P<base>\\d+\\.\\d+\\.\\d+)$"
# Only include metadata for non-tagged versions
format-jinja = "{% if distance == 0 %}{{ base }}{% else %}{{ base }}.post{{ distance }}{% endif %}"

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.isort]
profile = "black"
py_version = 312

[tool.coverage.report]
# Set the number of decimal places in coverage percentage
precision = 2

# Show lines that were not executed
show_missing = true

# Skip empty files
skip_empty = true

[tool.coverage.html]
# Directory for the HTML format report
directory = "coverage/html"

[tool.coverage.lcov]
# Filename for the LCOV format report
output = "coverage/lcov/coverage.lcov"

[tool.coverage.xml]
# Filename for the XML format report
output = "coverage/xml/coverage.xml"

[tool.coverage.run]
# Enable branch coverage (default: False)
branch = true

# Run tests in parallel (useful when using CI/CD)
parallel = true

# Filename for storing coverage data
data_file = "coverage/.coverage"

# Omit specified files or directories from the report
omit = [
    "*/__pycache__/*",
    "*/.poetry/*",
    "*/.pytest_cache/*",
    "*/.venv/*",
    "*/coverage/*",
    "*/dist/*",
    "*/tests/*",
    "*/tmp_*/*",
    "/tmp/*",
]
